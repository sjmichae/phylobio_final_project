#####################
#This morphology program is a modified version of a program in the RevBayes tutorial
#This program uses parsimony to create trees using the table morphology data
#####################


######################
# read in the data 
######################

#time_tree <- readTrees("data/Primates_tree.nex")[1]
data <- readDiscreteCharacterData("data/primates_morph.nex")

n_char <- data.nchar()


# We will use all of the datapoints in the matrix
#data.excludeCharacter(5:n_char)
#data.includeCharacter(1)


# Get some useful variables from the data. We need these later on.
n_species = data.ntaxa()
taxa = data.taxa()
n_branches = 2 * n_species - 3


mvi = 0
mni = 0

n_sites = 4
n_states = 2


###################
# Molecular clock #
###################

### we use a uniform prior on the log-transform clock rate
log_clock_rate ~ dnUniform(-8,2)
moves[++mvi] = mvSlide(log_clock_rate, weight=2.0)
clock_rate := 10^log_clock_rate


######################
# Substitution Model #
######################

# Now create a deterministic variable for the nucleotide substitution rate matrix.
Q <- fnJC( n_states )


for (i in 1:n_sites) {
    rf[i] ~ dnDirichlet( rep(1,n_states) )
    moves[++mvi] = mvBetaSimplex(rf[i], weight=n_states)
    moves[++mvi] = mvDirichletSimplex(rf[i], offset=1, weight=n_states)
}

# Create a stochastic node for the sequence evolution continuous-time Markov chain (CTMC).
for (i in 1:n_sites) {
    morph_ctmc[i] ~ dnPhyloCTMC(tree=time_tree, Q=Q, branchRates=clock_rate, rootFrequencies=rf[i], type="Standard")

    data_site[i] <- data
    data_site[i].excludeAll()
    data_site[i].includeCharacter(i)
    # and attach the sequence data
    morph_ctmc[i].clamp(data_site[i])
}


##################
# Finalize the integrated model and set up MCMC
##################

mymodel = model(time_tree)

# Create the monitors:
# First, a screen monitor with some useful variables:
monitors[++mni] = mnScreen(printgen=1000, clock_rate)

# And another monitor for all the model variables:
#monitors[++mni] = mnModel(filename="output/morph_MK_ind.log", printgen=10)
monitors[++mni] = mnFile(filename="output/morph_MK_ind.log", rf[1], rf[2], rf[3], rf[4], printgen=10)



# Now set up the MCMC.
#mymcmc = mcmc(mymodel, monitors, moves)

### pre-burnin to tune the proposals
#mymcmc.burnin(generations=5000,tuningInterval=500)

### run the MCMC
#mymcmc.run(generations=20000)

#mymcmc.operatorSummary()



### compute power posterior distributions
pow_p = powerPosterior(mymodel, moves, monitors, "output/morph_MK_ind.out", cats=100, sampleFreq=10) 
pow_p.burnin(generations=10000,tuningInterval=200)
pow_p.run(generations=2000)  

### Use stepping-stone sampling to calculate marginal likelihoods
ss = steppingStoneSampler(file="output/morph_MK_ind.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal() 

### Use path-sampling to calculate marginal likelihoods
ps = pathSampler(file="output/morph_MK_ind.out", powerColumnName="power", likelihoodColumnName="likelihood")
ps.marginal() 



q()
